#    for(k in j:length(n)){
#      intersect(p$mi_ontologia[which(p$mi_ontologia[, "go_id"] %in% n[j]), ], p$mi_ontologia[which(p$mi_ontologia[, "go_id"] %in% n[k]), ])
#    }
#  }
#}
#g<-unique(p$mi_ontologia[, "gene_id"])
pv2<-0
iterac<-1000
for(r in 1:iterac){
if(ontologia == "CC") g <- gggg[[sample(which(lapply(gggg, function(x){length(x) >= length(b)}) == TRUE), 1)]]
e<-a
d<-sample(g, length(b), replace = FALSE)
names(d)<-b
for(i in 1:length(d)){
e[which(a[, "gene_id"] == names(d)[i]), "gene_id"]<-d[i]
}
#l<-vector(mode="list", length=length(names(a)))
#names(l)<-names(a)
#for(i in 1:2){#length(l)){
#  b<-sample(g[!(g %in% l[[i]])], (a[i]-length(l[[i]])), replace = FALSE);
#  if(length(b) > 0){
#    for(j in c(names(a[i]), intersect(names(a), ancestros[names(a)[i]][[1]]))){
#      l[[j]]<-unique(c(l[[j]], b))
#    }
#  }
#}
#genes_blancos_sacados_en_cada_go <- unlist(lapply(l, function(x){length(intersect(x, p$genes_blancos))}))
genes_blancos_sacados_en_cada_go <- unlist(lapply(terminos, function(x){length(intersect(unique(e[which(e[, "go_id"] == x), "gene_id"]), p$genes_blancos))}))
genes_blancos <- p$genes_blancos
genes_negros <- p$genes_negros
genes_sacados_en_cada_go <-  p$anotaciones[terminos]
#Usamos phyper para hacer el test hypergeométrico. Hay que restarle 1 a los genes blancos sacados si usamos sobrerepresentación porque el test es para p<=p0 o p > p0
pv2<-pv2+phyper((genes_blancos_sacados_en_cada_go - 1L), length(genes_blancos), length(genes_negros), genes_sacados_en_cada_go, lower.tail=FALSE)
}
pv2<-pv2/iterac
names(pv2)<-terminos
return (list(pvalues=pv2, mh=exp(mean(log(-log(pv2))))))
}
#p$pvalues[names(a)]
#pv2
#proc.time() - ptm
#anotaciones_random
#seteo parametros HyperG
library(GO.db)
require(GOstats)
require(ath1121501.db)
library(igraph)
library(GOSemSim)
library(ggplot2)
library(grid)
library(gridExtra)
#Cargamos librerías
library(genefilter) #Para el filtrado de genes K over A
library(dynamicTreeCut) #Para clusterizar con dynamic tree cut
#Traemos la base de datos del chipset que nos dice a que gen corresponde cada probeset
require(ath1121501.db)
setwd("~/Desktop/Bioinformatica/TP1")
library(igraph)
library(VennDiagram)
#1)a y b)
nombres <- c("yeast_Y2H", "yeast_AP-MS", "yeast_LIT")
for(n in nombres){
yeast<-read.csv(paste("data/", n, ".txt", sep=""), header=FALSE, sep="\t")
g<-simplify(graph.data.frame(yeast, directed=FALSE))
nodos <- vcount(g)
enlaces <- ecount(g)
grado <- degree(g)
ccl<-transitivity(g, type="local")
ccl[is.nan(ccl)]<-0
transitividad_local <- mean(ccl)
transitividad_global <-transitivity(g, type="global")
diametro <- diameter(g)
cat("Red:", n, "\nNodos:", nodos, "\nEnlaces:", enlaces, "\n<k>:", mean(grado), "\nkmin:", min(grado), "\nkmax:", max(grado), "\nDensidad:", mean(grado)/(nodos-1), "\nCoeficiente de clustering local:", transitividad_local, "\nCoeficiente de clustering global:", transitividad_global, "\nDiametro:", diametro, "\n")
jpeg(file = paste("imagenes/", n, ".jpg", sep=""))
plot(g, vertex.label=NA, vertex.size=2, main=n)
dev.off()
}
#1)d)
nombres <- c("yeast_Y2H", "yeast_AP-MS", "yeast_LIT")
g<-vector("list", length(nombres))
names(g)<-nombres
for(n in nombres){
yeast<-read.csv(paste("data/", n, ".txt", sep=""), header=FALSE, sep="\t")
g[[n]]<-names(V(simplify(graph.data.frame(yeast, directed=FALSE))))
}
grid.draw(venn.diagram(g, filename = NULL))
#2)a)
g<-read.graph("data/dolphins.gml", format = "gml")
sexo<-read.csv("data/dolphinsGender.txt", header=FALSE, sep="\t", as.is = T)
rownames(sexo)<-sexo[, 1]
sexo[is.na(sexo[, 2]), 2] <- "a"
colores <- c("pink", "lightblue", "green")
names(colores)<-c("f", "m", "a")
plot(g, vertex.size=4, main="Delfines", vertex.color=colores[sexo[V(g)$label, 2]], layout=layout.fruchterman.reingold)
#2)b)
##Retocado por Maxi 01/09...
g <- induced_subgraph(g, V(g)[!V(g)$label %in% sexo[which(sexo[,2] == "a"), 1]]) #Sacamos los delfines travestis porque meten ruido
sexo<-sexo[!sexo[, 2]=="a", ]
dm<-V(g)[V(g)$label %in% sexo[which(sexo[,2] == "m"), 1]]
df<-V(g)[V(g)$label %in% sexo[which(sexo[,2] == "f"), 1]]
gdm<-induced_subgraph(g, dm)
gdf<-induced_subgraph(g, df)
plot(gdm, vertex.size=4, main="Delfines masculinos")
plot(gdf, vertex.size=4, main="Delfines femeninos")
cat("Enlaces entre delfines masculinos: ", ecount(gdm)/ecount(g), "\nEnlaces entre delfines femeninos: ", ecount(gdf)/ecount(g), "\n")
#cat("Enlaces homolificos: ", (ecount(gdm) + ecount(gdf))/ecount(g))
homofilia_dol<-(ecount(gdm) + ecount(gdf))/ecount(g)
fraccion_masculino <- c()
fraccion_femenino  <- c()
sexoa <- sexo
set.seed(12345)
for(i in 1:1000){
sexoa[,2] <- sample(sexo[, 2], nrow(sexo))
dm<-V(g)[V(g)$label %in% sexoa[which(sexoa[,2] == "m"), 1]]
df<-V(g)[V(g)$label %in% sexoa[which(sexoa[,2] == "f"), 1]]
gdm<-induced_subgraph(g, dm)
gdf<-induced_subgraph(g, df)
fraccion_masculino <- c(fraccion_masculino, ecount(gdm))
fraccion_femenino <- c(fraccion_femenino, ecount(gdf))
}
frac_homo<-(fraccion_masculino + fraccion_femenino)/ecount(g)
hist(frac_homo)
pvalue<-sum(frac_homo>=homofilia_dol)/1000
#Directorio por defecto
setwd("~/doctorado/programacion/clustering/")
#Cargamos librerías
library(genefilter) #Para el filtrado de genes K over A
library(dynamicTreeCut) #Para clusterizar con dynamic tree cut
#Leemos los archivos de datos de stress y el detalle de que es cada columna de stress (lo que llamamos tratamientos)
datos_stress             <- read.table("datos_originales_wygel/AtGE_Abiostress_gcRMA.txt",header=TRUE, as.is=TRUE)
detalles_de_tratamientos <- read.table("datos_originales_wygel/AtGE-Abiostress-sampleList.cvs",header=TRUE, as.is=TRUE)
#Ponemos como rownames los IDS de las tablas
rownames(datos_stress)             <- datos_stress[, 1]
rownames(detalles_de_tratamientos) <- detalles_de_tratamientos[, 1]
#Traemos la base de datos del chipset que nos dice a que gen corresponde cada probeset
require(ath1121501.db)
#Matchiamos los probesets a sus genes correspondientes
nombres_de_genes    <- unlist(mget(rownames(datos_stress), ath1121501ACCNUM, ifnotfound = NA))
#Descartamos todos los probesets que no matchean a ningun gen porque no sabemos que son
nombres_de_genes <- nombres_de_genes[!is.na(nombres_de_genes)]
datos_stress     <- datos_stress[names(nombres_de_genes), ]
#Clusterizamos en cada tratamiento
correlaciones_medias <- matrix(0, ncol=7, nrow=11)
colnames(correlaciones_medias) <- c("single", "complete", "average", "ward.D", "ward.D2", "mcquitty", "centroid")
rownames(correlaciones_medias) <- unique(detalles_de_tratamientos[, "TYPE"])
for(tratamiento in unique(detalles_de_tratamientos[, "TYPE"])[2]){
print(tratamiento)
#Traemos el detalle de la serie temporal de este tratamiento
serie_temporal <- detalles_de_tratamientos[detalles_de_tratamientos[,"TYPE"] == tratamiento & detalles_de_tratamientos[,"SRC"]=="Roots", "ID"]
#Promediamos las dos réplicas en la serie temporal
ipar <- seq(2,length(serie_temporal),2)
inon <- ipar-1
stress_promedio <- 0.5*(datos_stress[,serie_temporal[ipar]]+datos_stress[,serie_temporal[inon]])
#Aplicamos filtros de tipo desviación standar. Nos quedamos con el quantile > cuantil
cuantil            <- 0.9
sd_stress_promedio <- apply(stress_promedio, 1 ,sd)
cuantil_elegido    <- quantile(sd_stress_promedio, cuantil)
genes              <- stress_promedio[sd_stress_promedio > cuantil_elegido, ]
#Aplicamos un filtro de tipo k over a. Pedimos un nivel de señal mayor a 4 en la mitad de los puntos
koa   <- kOverA(0.5*ncol(genes), 4, na.rm = TRUE)
genes <- genes[apply(genes, 1, function(x){koa(x)}), ]
#Estandarizamos la serie temporal
genes <- t(apply(genes,1,function(x){return( (x-mean(x))/sd(x) )}))
genes_de_tratamiento_actual <- nombres_de_genes[rownames(genes)]
#Vamos a sacar los genes que tienen probesets redundantes. No son splicing alternativo pero
#de acuerdo con esto http://transvar.org/results/exp_cor/rp.shtml pueden ser probesets promiscuos
#probe sets that are promiscuous, i.e., map onto multiple gene targets according to the TAIR probe set-to-gene mappings we used.
genes_de_tratamiento_actual <- genes_de_tratamiento_actual[!(genes_de_tratamiento_actual %in% genes_de_tratamiento_actual[duplicated(genes_de_tratamiento_actual)])]
genes                       <- genes[names(genes_de_tratamiento_actual), ]
for(metodo in colnames(correlaciones_medias)[2]){
#Clusterizamos jerarquico y hacemos dynamic tree cut usando como distancia 0.5*(1-correlacion), con deepSplit = 1
distancia             <- as.dist(0.5*(1 - (cor(t(genes)))))
clusters_jerarquicos  <- hclust(distancia, method = metodo)
clusters              <- as.table(cutreeDynamic(clusters_jerarquicos, distM = as.matrix(distancia), deepSplit = 1))
}
}
#seteo parametros HyperG
library(GO.db)
require(GOstats)
require(ath1121501.db)
library(igraph)
library(GOSemSim)
library(ggplot2)
library(grid)
library(gridExtra)
setwd("~/doctorado/programacion/test_de_sobrerepresentacion/")
source("hypertest.R")
source("similaridad_semantica.R")
chip    <- "ath1121501"
universe<- unique(unlist(as.list(ath1121501ACCNUM)))
universe<-nombres_de_genes[rownames(genes)]
evidencia_a_filtrar = c("IEA", "NAS", "IC", "ND", "RCA")
p<-hypertest(nombres_de_genes[rownames(genes)][clusters == 2], universe, ontologia_a_filtrar = "BP", evidencia_a_filtrar)
ic <- -log2(p$anotaciones/p$anotaciones["GO:0008150"])
ancestros<-as.list(GOBPANCESTOR)
hijos<-as.list(GOBPOFFSPRING)
#terminos<-toTable(GOTERM)
#terminos<-lapply(terminos[p$dag@nodes], function(x) x@Term)
#Sin corrección
terminos_sobrerepresentados <- names(p$pvalues[p$pvalues < 0.05])
#Corrección BH
#categorias <- names(pvalues(hgt)[cbh(pvalues(hgt), 0.05)])
#Corrección B
#categorias <- names(pvalues(hgt)[pvalues(hgt)< 0.05/length(pvalues(hgt))])
#dyn.load("c/semsim.so")
#simRes2<-.Call("semsim", ancestros[p$terminos_go][1:5], ic)
simRes<-similaridad_semantica(ancestros[p$terminos_go][terminos_sobrerepresentados], ic)
#simRes2<-mgoSim(terminos_sobrerepresentados, terminos_sobrerepresentados, ont="BP", organism="arabidopsis", measure = "Resnik", combine=NULL)
distRes <- 1/(1+simRes)
#k <- kappa(p$mi_ontologia, names(which(p$pvalues < 0.05)))
#dk<- 0.5*(1-k)
#l<-list(semsim=distRes, dkappa=dk)
ldist<-list(semsim=distRes)
genes_cluster = nombres_de_genes[rownames(genes)][clusters == 2]
genes_termino_1 = genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==2]), 1])
distancia <- ldist[[i]]
#simRes2<-.Call("semsim", ancestros[p$terminos_go][1:5], ic)
simRes<-similaridad_semantica(ancestros[p$terminos_go][terminos_sobrerepresentados], ic)
#simRes2<-mgoSim(terminos_sobrerepresentados, terminos_sobrerepresentados, ont="BP", organism="arabidopsis", measure = "Resnik", combine=NULL)
distRes <- 1/(1+simRes)
#k <- kappa(p$mi_ontologia, names(which(p$pvalues < 0.05)))
#dk<- 0.5*(1-k)
#l<-list(semsim=distRes, dkappa=dk)
ldist<-list(semsim=distRes)
distancia <- ldist[[i]]
i
i = 1
#dyn.load("c/semsim.so")
#simRes2<-.Call("semsim", ancestros[p$terminos_go][1:5], ic)
simRes<-similaridad_semantica(ancestros[p$terminos_go][terminos_sobrerepresentados], ic)
#simRes2<-mgoSim(terminos_sobrerepresentados, terminos_sobrerepresentados, ont="BP", organism="arabidopsis", measure = "Resnik", combine=NULL)
distRes <- 1/(1+simRes)
#k <- kappa(p$mi_ontologia, names(which(p$pvalues < 0.05)))
#dk<- 0.5*(1-k)
#l<-list(semsim=distRes, dkappa=dk)
ldist<-list(semsim=distRes)
distancia <- ldist[[i]]
h<-hclust(as.dist(distancia))
clus<-cutreeDynamic(h, distM = distancia, minClusterSize = 5)
clus
table(clus)
genes_termino_1 = genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==2]), 1])
genes_cluster = nombres_de_genes[rownames(genes)][clusters == 2]
#Los genes blancos son los genes de mi cluster que tienen anotaciones, es decir, los que están en la sub_ontologia
genes_blancos         <- p$genes_blancos
#Los genes negros son los del universo que no son blancos
genes_negros              <- p$genes_negros
phyper((sum(genes_cluster %in% genes_termino) - 1L), length(genes_blancos), length(genes_negros), length(genes_termino), lower.tail=FALSE)
n <- length(unique(clus))
vee<-vector("list", 15)
g<-vector("list", 2)
ll = 1
for(k in 1:(n-1)){
g[[1]] = genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==k]), 1])]
for(l in (k+1):n){
names(g)<-c(k, l)
g[[2]] = genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==l]), 1])]
#grid.newpage()
#grid.draw(venn.diagram(g, filename = NULL))
vee[[ll]]<-gTree(children=venn.diagram(g, filename = NULL, main=paste(k, "(", colores[k], ")", "vs", l, "(", colores[l], ")")))
ll = ll + 1
}
}
genes_cluster = nombres_de_genes[rownames(genes)][clusters == 2]
#Los genes blancos son los genes de mi cluster que tienen anotaciones, es decir, los que están en la sub_ontologia
genes_blancos         <- p$genes_blancos
#Los genes negros son los del universo que no son blancos
genes_negros              <- p$genes_negros
#phyper((sum(genes_cluster %in% genes_termino) - 1L), length(genes_blancos), length(genes_negros), length(genes_termino), lower.tail=FALSE)
n <- length(unique(clus))
vee<-vector("list", 15)
g<-vector("list", 2)
ll = 1
for(k in 1:(n-1)){
g[[1]] = genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==k]), 1])]
for(l in (k+1):n){
names(g)<-c(k, l)
g[[2]] = genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==l]), 1])]
#grid.newpage()
#grid.draw(venn.diagram(g, filename = NULL))
vee[[ll]]<-gTree(children=venn.diagram(g, filename = NULL, main=paste(k, "(", colores[k], ")", "vs", l, "(", colores[l], ")")))
ll = ll + 1
}
}
grid.newpage()
grid.arrange(vee[[1]], vee[[2]], vee[[3]],
vee[[4]], vee[[5]], vee[[6]],
vee[[7]], vee[[8]], vee[[9]],
vee[[10]], vee[[11]], vee[[12]],
vee[[13]], vee[[14]], vee[[15]],
ncol=4)
nAttrs<-list()
nAttrs$label <- ""#p$dag@nodes#terminos#
colores <- c("white", "black", "green", "red", "blue", "yellow", "orange")#rainbow(max(clus)+1)#topo.colors(max(clus)+1)#
#colores[1] <- "#000000FF"
nAttrs$fillcolor <- rep("#FFFFFFFF", length(p$dag@nodes))
names(nAttrs$fillcolor) <- nodes(p$dag)
nAttrs$fillcolor[terminos_sobrerepresentados] <- colores[clus+1]
nAttrs$label[terminos_sobrerepresentados] <- clus
nAttrs$fontsize<-rep(30, length(p$dag@nodes))
names(nAttrs$fontsize) <- names(nAttrs$fillcolor)
plot(p$dag, nodeAttrs = nAttrs)
nAttrs<-list()
nAttrs$label <- hgt@goDag@nodes
colores <- rainbow(max(clus)+1)
colores[1] <- "#000000FF"
nAttrs$fillcolor <- rep("#FFFFFFFF", length(hgt@goDag@nodes))
names(nAttrs$fillcolor) <- nodes(hgt@goDag)
nAttrs$fillcolor[terminos_sobrerepresentados] <- colores[clus+1]
plot(hgt@goDag, nodeAttrs = nAttrs)
mica<-names(which.max(ic[Reduce(intersect, ancestros[terminos_sobrerepresentados])]))
l<-list(unique(unlist(ancestros[terminos_sobrerepresentados])), hijos[mica][[1]])
clus_minimo<-unique(c(Reduce(intersect, l), mica, terminos_sobrerepresentados))
plot(subGraph(clus_minimo, p$dag), nodeAttrs = nAttrs)
nAttrs$label[terminos_sobrerepresentados] <- clus
mica<-names(which.max(ic[Reduce(intersect, ancestros[terminos_sobrerepresentados])]))
l<-list(unique(unlist(ancestros[terminos_sobrerepresentados])), hijos[mica][[1]])
clus_minimo<-unique(c(Reduce(intersect, l), mica, terminos_sobrerepresentados))
plot(subGraph(clus_minimo, p$dag), nodeAttrs = nAttrs)
nAttrs$label[terminos_sobrerepresentados] <- clus
nAttrs$fontsize<-rep(50, length(p$dag@nodes))
mica<-names(which.max(ic[Reduce(intersect, ancestros[terminos_sobrerepresentados])]))
l<-list(unique(unlist(ancestros[terminos_sobrerepresentados])), hijos[mica][[1]])
clus_minimo<-unique(c(Reduce(intersect, l), mica, terminos_sobrerepresentados))
plot(subGraph(clus_minimo, p$dag), nodeAttrs = nAttrs)
names(nAttrs$fontsize) <- names(nAttrs$fillcolor)
mica<-names(which.max(ic[Reduce(intersect, ancestros[terminos_sobrerepresentados])]))
l<-list(unique(unlist(ancestros[terminos_sobrerepresentados])), hijos[mica][[1]])
clus_minimo<-unique(c(Reduce(intersect, l), mica, terminos_sobrerepresentados))
plot(subGraph(clus_minimo, p$dag), nodeAttrs = nAttrs)
nAttrs$fontsize<-rep(60, length(p$dag@nodes))
names(nAttrs$fontsize) <- names(nAttrs$fillcolor)
mica<-names(which.max(ic[Reduce(intersect, ancestros[terminos_sobrerepresentados])]))
l<-list(unique(unlist(ancestros[terminos_sobrerepresentados])), hijos[mica][[1]])
clus_minimo<-unique(c(Reduce(intersect, l), mica, terminos_sobrerepresentados))
plot(subGraph(clus_minimo, p$dag), nodeAttrs = nAttrs)
genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==6]), 1])]
p<-hypertest(genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==6]), 1])], universe, ontologia_a_filtrar = "BP", evidencia_a_filtrar)
p$pvalues
p$pvalues < 0.05
sum(p$pvalues < 0.05)
genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==6]), 1])]
genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==5]), 1])]
paste(genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==5]), 1])])
paste(genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==5]), 1])], sep="\n")
as.factor(paste(genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==5]), 1])]))
as.factor(genes_cluster)
as.factor(paste(genes_cluster))
as.factor(paste(genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==1]), 1])]))
as.factor(paste(genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==3]), 1])]))
unique(detalles_de_tratamientos[, "TYPE"])[2]
unique(detalles_de_tratamientos[, "TYPE"])
unique(detalles_de_tratamientos[, "TYPE"])[8]
for(tratamiento in unique(detalles_de_tratamientos[, "TYPE"])[8]){
print(tratamiento)
#Traemos el detalle de la serie temporal de este tratamiento
serie_temporal <- detalles_de_tratamientos[detalles_de_tratamientos[,"TYPE"] == tratamiento & detalles_de_tratamientos[,"SRC"]=="Roots", "ID"]
#Promediamos las dos réplicas en la serie temporal
ipar <- seq(2,length(serie_temporal),2)
inon <- ipar-1
stress_promedio <- 0.5*(datos_stress[,serie_temporal[ipar]]+datos_stress[,serie_temporal[inon]])
#Aplicamos filtros de tipo desviación standar. Nos quedamos con el quantile > cuantil
cuantil            <- 0.9
sd_stress_promedio <- apply(stress_promedio, 1 ,sd)
cuantil_elegido    <- quantile(sd_stress_promedio, cuantil)
genes              <- stress_promedio[sd_stress_promedio > cuantil_elegido, ]
#Aplicamos un filtro de tipo k over a. Pedimos un nivel de señal mayor a 4 en la mitad de los puntos
koa   <- kOverA(0.5*ncol(genes), 4, na.rm = TRUE)
genes <- genes[apply(genes, 1, function(x){koa(x)}), ]
#Estandarizamos la serie temporal
genes <- t(apply(genes,1,function(x){return( (x-mean(x))/sd(x) )}))
genes_de_tratamiento_actual <- nombres_de_genes[rownames(genes)]
#Vamos a sacar los genes que tienen probesets redundantes. No son splicing alternativo pero
#de acuerdo con esto http://transvar.org/results/exp_cor/rp.shtml pueden ser probesets promiscuos
#probe sets that are promiscuous, i.e., map onto multiple gene targets according to the TAIR probe set-to-gene mappings we used.
genes_de_tratamiento_actual <- genes_de_tratamiento_actual[!(genes_de_tratamiento_actual %in% genes_de_tratamiento_actual[duplicated(genes_de_tratamiento_actual)])]
genes                       <- genes[names(genes_de_tratamiento_actual), ]
for(metodo in colnames(correlaciones_medias)[2]){
#Clusterizamos jerarquico y hacemos dynamic tree cut usando como distancia 0.5*(1-correlacion), con deepSplit = 1
distancia             <- as.dist(0.5*(1 - (cor(t(genes)))))
clusters_jerarquicos  <- hclust(distancia, method = metodo)
clusters              <- as.table(cutreeDynamic(clusters_jerarquicos, distM = as.matrix(distancia), deepSplit = 1))
}
}
table(clusters)
p<-hypertest(nombres_de_genes[rownames(genes)][clusters == 1], universe, ontologia_a_filtrar = "BP", evidencia_a_filtrar)
ic <- -log2(p$anotaciones/p$anotaciones["GO:0008150"])
ancestros<-as.list(GOBPANCESTOR)
hijos<-as.list(GOBPOFFSPRING)
#terminos<-toTable(GOTERM)
#terminos<-lapply(terminos[p$dag@nodes], function(x) x@Term)
#Sin corrección
terminos_sobrerepresentados <- names(p$pvalues[p$pvalues < 0.05])
#Corrección BH
#categorias <- names(pvalues(hgt)[cbh(pvalues(hgt), 0.05)])
#Corrección B
#categorias <- names(pvalues(hgt)[pvalues(hgt)< 0.05/length(pvalues(hgt))])
#dyn.load("c/semsim.so")
#simRes2<-.Call("semsim", ancestros[p$terminos_go][1:5], ic)
simRes<-similaridad_semantica(ancestros[p$terminos_go][terminos_sobrerepresentados], ic)
#simRes2<-mgoSim(terminos_sobrerepresentados, terminos_sobrerepresentados, ont="BP", organism="arabidopsis", measure = "Resnik", combine=NULL)
distRes <- 1/(1+simRes)
#k <- kappa(p$mi_ontologia, names(which(p$pvalues < 0.05)))
#dk<- 0.5*(1-k)
#l<-list(semsim=distRes, dkappa=dk)
ldist<-list(semsim=distRes)
distancia <- ldist[[i]]
h<-hclust(as.dist(distancia[terminos_sobrerepresentados, terminos_sobrerepresentados]))
i
clus<-cutreeDynamic(h, distM = distancia[terminos_sobrerepresentados, terminos_sobrerepresentados], minClusterSize = 5)
nombres_de_genes[rownames(genes)][clusters == 2]
genes_cluster = nombres_de_genes[rownames(genes)][clusters == 1]
#Los genes blancos son los genes de mi cluster que tienen anotaciones, es decir, los que están en la sub_ontologia
genes_blancos         <- p$genes_blancos
#Los genes negros son los del universo que no son blancos
genes_negros              <- p$genes_negros
#phyper((sum(genes_cluster %in% genes_termino) - 1L), length(genes_blancos), length(genes_negros), length(genes_termino), lower.tail=FALSE)
n <- length(unique(clus))
vee<-vector("list", 15)
g<-vector("list", 2)
ll = 1
for(k in 1:(n-1)){
g[[1]] = genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==k]), 1])]
for(l in (k+1):n){
names(g)<-c(k, l)
g[[2]] = genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==l]), 1])]
#grid.newpage()
#grid.draw(venn.diagram(g, filename = NULL))
vee[[ll]]<-gTree(children=venn.diagram(g, filename = NULL, main=paste(k, "(", colores[k], ")", "vs", l, "(", colores[l], ")")))
ll = ll + 1
}
}
grid.newpage()
grid.arrange(vee[[1]], vee[[2]], vee[[3]],
vee[[4]], vee[[5]], vee[[6]],
vee[[7]], vee[[8]], vee[[9]],
vee[[10]], vee[[11]], vee[[12]],
vee[[13]], vee[[14]], vee[[15]],
ncol=4)
clus
n
unique(clus)
n <- max(unique(clus))
vee<-vector("list", 15)
g<-vector("list", 2)
ll = 1
for(k in 1:(n-1)){
g[[1]] = genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==k]), 1])]
for(l in (k+1):n){
names(g)<-c(k, l)
g[[2]] = genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==l]), 1])]
#grid.newpage()
#grid.draw(venn.diagram(g, filename = NULL))
vee[[ll]]<-gTree(children=venn.diagram(g, filename = NULL, main=paste(k, "(", colores[k], ")", "vs", l, "(", colores[l], ")")))
ll = ll + 1
}
}
k
g[[1]] = genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==k]), 1])]
g[[1]]
unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==k])
unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==k])
unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==k]), 1])
genes_cluster
p$mi_ontologia[, 2]
l
k
p$mi_ontologia
p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==k]), 1]
unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==k]), 1])
genes_cluster
genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==k]), 1])
terminos_sobrerepresentados <- names(p$pvalues[p$pvalues < 0.05])
p<-hypertest(nombres_de_genes[rownames(genes)][clusters == 1], universe, ontologia_a_filtrar = "BP", evidencia_a_filtrar)
ic <- -log2(p$anotaciones/p$anotaciones["GO:0008150"])
ancestros<-as.list(GOBPANCESTOR)
hijos<-as.list(GOBPOFFSPRING)
#terminos<-toTable(GOTERM)
#terminos<-lapply(terminos[p$dag@nodes], function(x) x@Term)
#Sin corrección
terminos_sobrerepresentados <- names(p$pvalues[p$pvalues < 0.05])
#Corrección BH
#categorias <- names(pvalues(hgt)[cbh(pvalues(hgt), 0.05)])
#Corrección B
#categorias <- names(pvalues(hgt)[pvalues(hgt)< 0.05/length(pvalues(hgt))])
#dyn.load("c/semsim.so")
#simRes2<-.Call("semsim", ancestros[p$terminos_go][1:5], ic)
simRes<-similaridad_semantica(ancestros[p$terminos_go][terminos_sobrerepresentados], ic)
#simRes2<-mgoSim(terminos_sobrerepresentados, terminos_sobrerepresentados, ont="BP", organism="arabidopsis", measure = "Resnik", combine=NULL)
distRes <- 1/(1+simRes)
#k <- kappa(p$mi_ontologia, names(which(p$pvalues < 0.05)))
#dk<- 0.5*(1-k)
#l<-list(semsim=distRes, dkappa=dk)
ldist<-list(semsim=distRes)
distancia <- ldist[[i]]
h<-hclust(as.dist(distancia[terminos_sobrerepresentados, terminos_sobrerepresentados]))
clus<-cutreeDynamic(h, distM = distancia[terminos_sobrerepresentados, terminos_sobrerepresentados], minClusterSize = 5)
n <- max(unique(clus))
vee<-vector("list", 15)
g<-vector("list", 2)
ll = 1
for(k in 1:(n-1)){
g[[1]] = genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==k]), 1])]
for(l in (k+1):n){
names(g)<-c(k, l)
g[[2]] = genes_cluster[genes_cluster %in% unique(p$mi_ontologia[which(p$mi_ontologia[, 2] %in% terminos_sobrerepresentados[clus==l]), 1])]
#grid.newpage()
#grid.draw(venn.diagram(g, filename = NULL))
vee[[ll]]<-gTree(children=venn.diagram(g, filename = NULL, main=paste(k, "(", colores[k], ")", "vs", l, "(", colores[l], ")")))
ll = ll + 1
}
}
